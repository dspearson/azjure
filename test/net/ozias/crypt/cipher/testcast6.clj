;; ## Test CAST6 Block Cipher
;; Test suite for the CAST6 block cipher.
(ns ^{:author "Jason Ozias"}
  net.ozias.crypt.cipher.testcast6
  (:require [clojure.test :refer :all]
            [net.ozias.crypt.testkeys :refer :all]
            [net.ozias.crypt.cipher.cast6 :refer (->CAST6)]
            [net.ozias.crypt.cipher.blockcipher :as bc]))

;; #### c6
;; Create the CAST6 record to be used in the tests.
(def c6 (->CAST6))

;; #### test-vectors
;; Test vectors found at
;; [http://tools.ietf.org/html/rfc2612#page-10](http://tools.ietf.org/html/rfc2612#page-10)
;;
;; Each row represents
;;
;;     [  key  ] [plaintext] [ciphertext]
;;
;; as vectors of bytes.
(def test-vectors
  [[[0x23 0x42 0xbb 0x9e 0xfa 0x38 0x54 0x2c
     0x0a 0xf7 0x56 0x47 0xf2 0x9f 0x61 0x5d]
    [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
    [0xc8 0x42 0xa0 0x89 0x72 0xb4 0x3d 0x20
     0x83 0x6c 0x91 0xd1 0xb7 0x53 0x0f 0x6b]]
   [[0x23 0x42 0xbb 0x9e 0xfa 0x38 0x54 0x2c
     0xbe 0xd0 0xac 0x83 0x94 0x0a 0xc2 0x98
     0xba 0xc7 0x7a 0x77 0x17 0x94 0x28 0x63]
    [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
    [0x1b 0x38 0x6c 0x02 0x10 0xdc 0xad 0xcb
     0xdd 0x0e 0x41 0xaa 0x08 0xa7 0xa7 0xe8]]
   [[0x23 0x42 0xbb 0x9e 0xfa 0x38 0x54 0x2c
     0xbe 0xd0 0xac 0x83 0x94 0x0a 0xc2 0x98
     0x8d 0x7c 0x47 0xce 0x26 0x49 0x08 0x46
     0x1c 0xc1 0xb5 0x13 0x7a 0xe6 0xb6 0x04]
    [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
    [0x4f 0x6a 0x20 0x38 0x28 0x68 0x97 0xb9
     0xc9 0x87 0x01 0x36 0x55 0x33 0x17 0xfa]]
   [key-128b
    [0x54 0x68 0x65 0x20 0x71 0x75 0x69 0x63
     0x6B 0x20 0x62 0x72 0x6F 0x77 0x6E 0x20]
    [0x16 0xa8 0xf4 0x33 0x39 0x54 0xed 0x44
     0xe2 0x99 0x14 0x85 0x5f 0xc3 0x1a 0x07]]])

;; ## test-encrypt
;; Helper function for CAST6 encryption testing
(defn- test-encrypt [[key cleartext ciphertext]]
  (is (= ciphertext (bc/encrypt-block c6 cleartext key))))

;; ## test-decrypt
;; Helper function for CAST5 decryption testing
(defn- test-decrypt [[key cleartext ciphertext]]
  (is (= cleartext (bc/decrypt-block c6 ciphertext key))))

;; ## testCAST6
;; Test the CAST6 cipher
(deftest testCAST6
  (testing "Blocksize"
    (is (= 128 (bc/blocksize c6))))
  (testing "Encryption"
    (is (= true (every? true? (map test-encrypt test-vectors)))))
  (testing "Decryption"
    (is (= true (every? true? (map test-decrypt test-vectors))))))
