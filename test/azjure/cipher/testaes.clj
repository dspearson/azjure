(ns azjure.cipher.testaes
  (:require [azjure.cipher.blockcipher :refer :all]
            [azjure.cipher.cipher :refer :all]
            [azjure.libtest :refer :all]
            [azjure.core :refer :all]

            [azjure.plaintext :refer [pt]]
            [midje.sweet :refer :all]))

(def ^{:private true :doc "Configuration Map"} cm
  (atom {:type :aes
         :mode :ecb
         :pad  :x923
         :eid  :str
         :doe  :str}))

(def ^{:doc "128-bit AES test vector key as defined in Appendix C.1 in
  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  key-128-aes
  [0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07
   0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e 0x0f])
(def ^{:doc "192-bit AES test vector key as defined in Appendix C.2 in
  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  key-192-aes
  (into key-128-aes [0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17]))
(def ^{:doc "256-bit AES test vector key as defined in Appendix C.2 in
  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  key-256-aes
  (into key-192-aes [0x18 0x19 0x1a 0x1b 0x1c 0x1d 0x1e 0x1f]))
(def ^{:doc "128-bit AES test vector plaintext as defined in Appendix C.1, C.2,
  and C.3 in http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  pt-128-aes
  [0x00 0x11 0x22 0x33 0x44 0x55 0x66 0x77
   0x88 0x99 0xaa 0xbb 0xcc 0xdd 0xee 0xff])
(def ^{:doc "The test vector ciphertext block for 128-bit key encryption as
  defined in Appendix C.1 in
  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  ct-128-aes
  [0x69 0xc4 0xe0 0xd8 0x6a 0x7b 0x04 0x30
   0xd8 0xcd 0xb7 0x80 0x70 0xb4 0xc5 0x5a])
(def ^{:doc "The test vector ciphertext block for 192-bit key encryption as
  defined in Appendix C.2 in
  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  ct-192-aes
  [0xdd 0xa9 0x7c 0xa4 0x86 0x4c 0xdf 0xe0
   0x6e 0xaf 0x70 0xa0 0xec 0x0d 0x71 0x91])
(def ^{:doc "The test vector ciphertext block for 256-bit key encryption as
  defined in Appendix C.3 in
  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"}
  ct-256-aes
  [0x8e 0xa2 0xb7 0xca 0x51 0x67 0x45 0xbf
   0xea 0xfc 0x49 0x90 0x4b 0x49 0x60 0x89])

(def ^{:doc "Base AES/ECB test ciphertext"}
  ct-128-aesecb-base
  [0xDC 0xD3 0x09 0x6E 0x63 0x6C 0x77 0x85
   0xA4 0x27 0x21 0x84 0x67 0x47 0xD1 0xC3
   0xED 0x58 0xA2 0x1D 0x03 0x47 0xBB 0x41
   0x50 0x80 0x25 0xF7 0xA1 0x8E 0x37 0x99])

(def ^{:doc "AES/ECB/X923 test ciphertext"}
  ct-128-aesecbx923
  (into ct-128-aesecb-base [0x7B 0x87 0x10 0x70 0xC5 0x06 0xDE 0x23
                            0xB9 0x58 0x38 0x3D 0x0D 0x9D 0x7C 0x9F]))
(def ^{:doc "AES/ECB/ISO7816 test ciphertext"}
  ct-128-aesecbiso7816
  (into ct-128-aesecb-base [0xCB 0xBD 0xC0 0x5E 0xC6 0xD4 0x45 0xA7
                            0x84 0x10 0x79 0xA6 0xA0 0xFB 0x80 0x08]))

(def ^{:doc "AES/ECB/PKCS7 test ciphertext"}
  ct-128-aesecbpkcs7
  (into ct-128-aesecb-base [0xF0 0x62 0xDD 0x49 0x79 0x57 0x10 0x59
                            0x79 0x33 0x46 0xBE 0x30 0xAD 0x3D 0xDD]))

(def ^{:doc "AES/ECB/ZERO test ciphertext"}
  ct-128-aesecbzero
  (into ct-128-aesecb-base [0xD0 0x31 0x63 0x6B 0x01 0xDB 0x29 0x34
                            0x0D 0xE1 0xBA 0x53 0x10 0xCE 0xF6 0xFB]))

(def ^{:doc "Base AES/CBC test ciphertext"}
  ct-128-aescbc-base
  [0xDC 0xD3 0x09 0x6E 0x63 0x6C 0x77 0x85
   0xA4 0x27 0x21 0x84 0x67 0x47 0xD1 0xC3
   0x9C 0xB4 0xE0 0xF6 0xB9 0x11 0x45 0xE7
   0x65 0x64 0xA1 0x80 0xA6 0x9E 0x61 0x32])

(def ^{:doc "AES/CBC/X923 test ciphertext"}
  ct-128-aescbcx923
  (into ct-128-aescbc-base [0x2D 0x2C 0x3D 0xCD 0x33 0xE3 0x52 0x8B
                            0x77 0x9C 0x96 0xED 0x4A 0x88 0x5F 0x6F]))

(def ^{:doc "AES/CBC/ISO7816 test ciphertext"}
  ct-128-aescbciso7816
  (into ct-128-aescbc-base [0xA9 0x5A 0x53 0x7C 0xFA 0x69 0x7D 0x39
                            0xEE 0xF8 0xF6 0x8E 0x3B 0x2E 0x6E 0xAC]))

(def ^{:doc "AES/CBC/PKCS7 test ciphertext"}
  ct-128-aescbcpkcs7
  (into ct-128-aescbc-base [0x0D 0x8F 0xD5 0x49 0x3B 0xEB 0x22 0xA1
                            0xCA 0xC0 0x6B 0xC6 0x4F 0x01 0x83 0x1A]))

(def ^{:doc "AES/CBC/ZERO test ciphertext"}
  ct-128-aescbczero
  (into ct-128-aescbc-base [0xEA 0xDE 0x04 0x0E 0xEA 0xDA 0x8F 0x39
                            0x00 0x32 0xCB 0xA7 0x3A 0xEA 0x34 0x1A]))

(def ^{:doc "Base AES/PCBC test ciphertext"}
  ct-128-aespcbc-base
  [0xDC 0xD3 0x09 0x6E 0x63 0x6C 0x77 0x85
   0xA4 0x27 0x21 0x84 0x67 0x47 0xD1 0xC3
   0xFB 0x0B 0x10 0x30 0x58 0x86 0x5D 0xF7
   0x97 0xA0 0x32 0x59 0xF6 0x43 0xF1 0xF0])

(def ^{:doc "AES/PCBC/X923 test ciphertext"}
  ct-128-aespcbcx923
  (into ct-128-aespcbc-base [0x76 0x6F 0x4E 0xA8 0x42 0x5D 0xAF 0x29
                             0x71 0xBA 0x3A 0x1B 0x55 0xF8 0x18 0x1B]))

(def ^{:doc "AES/PCBC/ISO7816 test ciphertext"}
  ct-128-aespcbciso7816
  (into ct-128-aespcbc-base [0x58 0x0C 0xDB 0xB9 0x95 0x63 0x85 0xD9
                             0xEA 0xED 0x2D 0x22 0x4A 0xF2 0xA9 0x45]))

(def ^{:doc "AES/PCBC/PKCS7 test ciphertext"}
  ct-128-aespcbcpkcs7
  (into ct-128-aespcbc-base [0xA8 0x7E 0xF8 0xAA 0x48 0x00 0x63 0x47
                             0x2C 0xCD 0x44 0x65 0xDE 0x74 0xAC 0xE5]))

(def ^{:doc "AES/PCBC/ZERO test ciphertext"}
  ct-128-aespcbczero
  (into ct-128-aespcbc-base [0xFE 0x3E 0xD0 0xFB 0x64 0x6B 0x7E 0x04
                             0x6B 0x22 0xC9 0x60 0x2B 0x3D 0x4B 0xE5]))

(def ^{:doc "Base AES/CFB test ciphertext"}
  ct-128-aescfb-base
  [0x32 0x81 0x2E 0xF4 0x9E 0xFF 0x45 0x58
   0xE3 0x6C 0x98 0x2B 0xA5 0x43 0x45 0x0E
   0x08 0xCD 0xE2 0xB6 0xD8 0x98 0x6F 0x11
   0xDB 0xA1 0x36 0xCD 0x3A 0x58 0x00 0x64])

(def ^{:doc "AES/CFB/X923 test ciphertext"}
  ct-128-aescfbx923
  (into ct-128-aescfb-base [0xEF 0x2B 0x54 0xD5 0xA4 0x2F 0x1B 0xFD
                            0x32 0xD7 0x4B 0xC7 0x44 0x33 0x7C 0x47]))

(def ^{:doc "AES/CFB/ISO7816 test ciphertext"}
  ct-128-aescfbiso7816
  (into ct-128-aescfb-base [0xEF 0x2B 0x54 0xD5 0xA4 0x2F 0x1B 0xFD
                            0x32 0xD7 0x4B 0xC7 0xC4 0x33 0x7C 0x43]))

(def ^{:doc "AES/CFB/PKCS7 test ciphertext"}
  ct-128-aescfbpkcs7
  (into ct-128-aescfb-base [0xEF 0x2B 0x54 0xD5 0xA4 0x2F 0x1B 0xFD
                            0x32 0xD7 0x4B 0xC7 0x40 0x37 0x78 0x47]))

(def ^{:doc "AES/CFB/ZERO test ciphertext"}
  ct-128-aescfbzero
  (into ct-128-aescfb-base [0xEF 0x2B 0x54 0xD5 0xA4 0x2F 0x1B 0xFD
                            0x32 0xD7 0x4B 0xC7 0x44 0x33 0x7C 0x43]))

(def ^{:doc "Base AES/OFB test ciphertext"}
  ct-128-aesofb-base
  [0x32 0x81 0x2E 0xF4 0x9E 0xFF 0x45 0x58
   0xE3 0x6C 0x98 0x2B 0xA5 0x43 0x45 0x0E
   0x91 0xFA 0xC5 0x6A 0x38 0x97 0xF3 0xA7
   0x76 0xB7 0x33 0x95 0x56 0x8C 0xFF 0x9C])

(def ^{:doc "AES/OFB/X923 test ciphertext"}
  ct-128-aesofbx923
  (into ct-128-aesofb-base [0xD5 0x64 0x93 0x4D 0x63 0xBC 0x89 0x39
                            0x73 0x14 0xDB 0xD8 0x8D 0xF5 0xBF 0xB7]))

(def ^{:doc "AES/OFB/ISO7816 test ciphertext"}
  ct-128-aesofbiso7816
  (into ct-128-aesofb-base [0xD5 0x64 0x93 0x4D 0x63 0xBC 0x89 0x39
                            0x73 0x14 0xDB 0xD8 0x0D 0xF5 0xBF 0xB3]))

(def ^{:doc "AES/OFB/PKCS7 test ciphertext"}
  ct-128-aesofbpkcs7
  (into ct-128-aesofb-base [0xD5 0x64 0x93 0x4D 0x63 0xBC 0x89 0x39
                            0x73 0x14 0xDB 0xD8 0x89 0xF1 0xBB 0xB7]))

(def ^{:doc "AES/OFB/ZERO test ciphertext"}
  ct-128-aesofbzero
  (into ct-128-aesofb-base [0xD5 0x64 0x93 0x4D 0x63 0xBC 0x89 0x39
                            0x73 0x14 0xDB 0xD8 0x8D 0xF5 0xBF 0xB3]))

(def ^{:doc "Base AES/CTR test ciphertext"}
  ct-128-aesctr-base
  [0x32 0x81 0x2E 0xF4 0x9E 0xFF 0x45 0x58
   0xE3 0x6C 0x98 0x2B 0xA5 0x43 0x45 0x0E
   0x3E 0x8D 0x84 0xEE 0x90 0x0B 0x5D 0x11
   0x53 0x1B 0x3D 0x38 0xD2 0x82 0x37 0x7A])

(def ^{:doc "AES/CTR/X923 test ciphertext"}
  ct-128-aesctrx923
  (into ct-128-aesctr-base [0x77 0xE0 0xBF 0xEE 0x0C 0xD7 0xD9 0xEB
                            0xD3 0x4C 0xAD 0xDE 0x71 0xB2 0xFE 0x7C]))

(def ^{:doc "AES/CTR/ISO7816 test ciphertext"}
  ct-128-aesctriso7816
  (into ct-128-aesctr-base [0x77 0xE0 0xBF 0xEE 0x0C 0xD7 0xD9 0xEB
                            0xD3 0x4C 0xAD 0xDE 0xF1 0xB2 0xFE 0x78]))

(def ^{:doc "AES/CTR/PKCS7 test ciphertext"}
  ct-128-aesctrpkcs7
  (into ct-128-aesctr-base [0x77 0xE0 0xBF 0xEE 0x0C 0xD7 0xD9 0xEB
                            0xD3 0x4C 0xAD 0xDE 0x75 0xB6 0xFA 0x7C]))

(def ^{:doc "AES/CTR/ZERO test ciphertext"}
  ct-128-aesctrzero
  (into ct-128-aesctr-base [0x77 0xE0 0xBF 0xEE 0x0C 0xD7 0xD9 0xEB
                            0xD3 0x4C 0xAD 0xDE 0x71 0xB2 0xFE 0x78]))

(def ^{:private true :doc "Test vectors as defined in the spec."}
  test-vectors
  [[key-128-aes pt-128-aes ct-128-aes]
   [key-192-aes pt-128-aes ct-192-aes]
   [key-256-aes pt-128-aes ct-256-aes]])

(def ^{:private true :doc "Suite tests"}
  test-suites
  [[:ecb :iso10126 ct-128-aesecb-base]
   [:ecb :iso7816 ct-128-aesecbiso7816]
   [:ecb :pkcs7 ct-128-aesecbpkcs7]
   [:ecb :x923 ct-128-aesecbx923]
   [:ecb :zero ct-128-aesecbzero]
   [:cbc :iso10126 ct-128-aescbc-base]
   [:cbc :iso7816 ct-128-aescbciso7816]
   [:cbc :pkcs7 ct-128-aescbcpkcs7]
   [:cbc :x923 ct-128-aescbcx923]
   [:cbc :zero ct-128-aescbczero]
   [:pcbc :iso10126 ct-128-aespcbc-base]
   [:pcbc :iso7816 ct-128-aespcbciso7816]
   [:pcbc :pkcs7 ct-128-aespcbcpkcs7]
   [:pcbc :x923 ct-128-aespcbcx923]
   [:pcbc :zero ct-128-aespcbczero]
   [:cfb :iso10126 ct-128-aescfb-base]
   [:cfb :iso7816 ct-128-aescfbiso7816]
   [:cfb :pkcs7 ct-128-aescfbpkcs7]
   [:cfb :x923 ct-128-aescfbx923]
   [:cfb :zero ct-128-aescfbzero]
   [:ofb :iso10126 ct-128-aesofb-base]
   [:ofb :iso7816 ct-128-aesofbiso7816]
   [:ofb :pkcs7 ct-128-aesofbpkcs7]
   [:ofb :x923 ct-128-aesofbx923]
   [:ofb :zero ct-128-aesofbzero]
   [:ctr :iso10126 ct-128-aesctr-base]
   [:ctr :iso7816 ct-128-aesctriso7816]
   [:ctr :pkcs7 ct-128-aesctrpkcs7]
   [:ctr :x923 ct-128-aesctrx923]
   [:ctr :zero ct-128-aesctrzero]])

(defn- aes-test-suite
  "Check the each padding and mode combination"
  [[mode pad ciphertext]]
  (with-state-changes
    [(before :facts (swap! cm assoc
                           :mode mode
                           :pad pad
                           :key key-128-zeros
                           :iv iv-128-zeros))]
    (facts
      (if-not (= pad :iso10126)
        (fact (encrypt pt @cm) => ciphertext)
        (fact (encrypt pt @cm) => (has-prefix ciphertext)))
      (if-not (= pad :iso10126)
        (fact (decrypt ciphertext @cm) => pt)
        (fact (decrypt (encrypt pt @cm) @cm) => pt)))))

(fact (blocksize-bits @cm) => 128)
(fact (keysizes-bits @cm) => [128 192 256])
(dorun (map (partial check-test-vectors cm) test-vectors))
(dorun (map (partial check-test-suite cm) test-suites))